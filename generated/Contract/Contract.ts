// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  EthereumCall,
  EthereumEvent,
  SmartContract,
  EthereumValue,
  JSONValue,
  TypedMap,
  Entity,
  EthereumTuple,
  Bytes,
  Address,
  BigInt,
  CallResult
} from "@graphprotocol/graph-ts";

export class Redeem extends EthereumEvent {
  get params(): Redeem__Params {
    return new Redeem__Params(this);
  }
}

export class Redeem__Params {
  _event: Redeem;

  constructor(event: Redeem) {
    this._event = event;
  }

  get _lockingId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _beneficiary(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get _batchIndex(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Release extends EthereumEvent {
  get params(): Release__Params {
    return new Release__Params(this);
  }
}

export class Release__Params {
  _event: Release;

  constructor(event: Release) {
    this._event = event;
  }

  get _lockingId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _beneficiary(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class LockToken extends EthereumEvent {
  get params(): LockToken__Params {
    return new LockToken__Params(this);
  }
}

export class LockToken__Params {
  _event: LockToken;

  constructor(event: LockToken) {
    this._event = event;
  }

  get _locker(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _lockingId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get _period(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class ExtendLocking extends EthereumEvent {
  get params(): ExtendLocking__Params {
    return new ExtendLocking__Params(this);
  }
}

export class ExtendLocking__Params {
  _event: ExtendLocking;

  constructor(event: ExtendLocking) {
    this._event = event;
  }

  get _locker(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _lockingId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _extendPeriod(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Contract__lockersResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set("value0", EthereumValue.fromUnsignedBigInt(this.value0));
    map.set("value1", EthereumValue.fromUnsignedBigInt(this.value1));
    map.set("value2", EthereumValue.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class Contract extends SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  getRepRewardPerBatch(_batchIndex: BigInt): BigInt {
    let result = super.call("getRepRewardPerBatch", [
      EthereumValue.fromUnsignedBigInt(_batchIndex)
    ]);

    return result[0].toBigInt();
  }

  try_getRepRewardPerBatch(_batchIndex: BigInt): CallResult<BigInt> {
    let result = super.tryCall("getRepRewardPerBatch", [
      EthereumValue.fromUnsignedBigInt(_batchIndex)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  release(_beneficiary: Address, _lockingId: BigInt): BigInt {
    let result = super.call("release", [
      EthereumValue.fromAddress(_beneficiary),
      EthereumValue.fromUnsignedBigInt(_lockingId)
    ]);

    return result[0].toBigInt();
  }

  try_release(_beneficiary: Address, _lockingId: BigInt): CallResult<BigInt> {
    let result = super.tryCall("release", [
      EthereumValue.fromAddress(_beneficiary),
      EthereumValue.fromUnsignedBigInt(_lockingId)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  repRewardConstB(): BigInt {
    let result = super.call("repRewardConstB", []);

    return result[0].toBigInt();
  }

  try_repRewardConstB(): CallResult<BigInt> {
    let result = super.tryCall("repRewardConstB", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  redeem(_beneficiary: Address, _lockingId: BigInt): BigInt {
    let result = super.call("redeem", [
      EthereumValue.fromAddress(_beneficiary),
      EthereumValue.fromUnsignedBigInt(_lockingId)
    ]);

    return result[0].toBigInt();
  }

  try_redeem(_beneficiary: Address, _lockingId: BigInt): CallResult<BigInt> {
    let result = super.tryCall("redeem", [
      EthereumValue.fromAddress(_beneficiary),
      EthereumValue.fromUnsignedBigInt(_lockingId)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  redeemEnableTime(): BigInt {
    let result = super.call("redeemEnableTime", []);

    return result[0].toBigInt();
  }

  try_redeemEnableTime(): CallResult<BigInt> {
    let result = super.tryCall("redeemEnableTime", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  repRewardConstA(): BigInt {
    let result = super.call("repRewardConstA", []);

    return result[0].toBigInt();
  }

  try_repRewardConstA(): CallResult<BigInt> {
    let result = super.tryCall("repRewardConstA", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  avatar(): Address {
    let result = super.call("avatar", []);

    return result[0].toAddress();
  }

  try_avatar(): CallResult<Address> {
    let result = super.tryCall("avatar", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  maxLockingBatches(): BigInt {
    let result = super.call("maxLockingBatches", []);

    return result[0].toBigInt();
  }

  try_maxLockingBatches(): CallResult<BigInt> {
    let result = super.tryCall("maxLockingBatches", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  MAX_LOCKING_BATCHES_HARDCAP(): BigInt {
    let result = super.call("MAX_LOCKING_BATCHES_HARDCAP", []);

    return result[0].toBigInt();
  }

  try_MAX_LOCKING_BATCHES_HARDCAP(): CallResult<BigInt> {
    let result = super.tryCall("MAX_LOCKING_BATCHES_HARDCAP", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  getAgreementHash(): Bytes {
    let result = super.call("getAgreementHash", []);

    return result[0].toBytes();
  }

  try_getAgreementHash(): CallResult<Bytes> {
    let result = super.tryCall("getAgreementHash", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }

  batchTime(): BigInt {
    let result = super.call("batchTime", []);

    return result[0].toBigInt();
  }

  try_batchTime(): CallResult<BigInt> {
    let result = super.tryCall("batchTime", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  batchesIndexCap(): BigInt {
    let result = super.call("batchesIndexCap", []);

    return result[0].toBigInt();
  }

  try_batchesIndexCap(): CallResult<BigInt> {
    let result = super.tryCall("batchesIndexCap", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  startTime(): BigInt {
    let result = super.call("startTime", []);

    return result[0].toBigInt();
  }

  try_startTime(): CallResult<BigInt> {
    let result = super.tryCall("startTime", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  lock(
    _amount: BigInt,
    _period: BigInt,
    _batchIndexToLockIn: BigInt,
    _agreementHash: Bytes
  ): BigInt {
    let result = super.call("lock", [
      EthereumValue.fromUnsignedBigInt(_amount),
      EthereumValue.fromUnsignedBigInt(_period),
      EthereumValue.fromUnsignedBigInt(_batchIndexToLockIn),
      EthereumValue.fromFixedBytes(_agreementHash)
    ]);

    return result[0].toBigInt();
  }

  try_lock(
    _amount: BigInt,
    _period: BigInt,
    _batchIndexToLockIn: BigInt,
    _agreementHash: Bytes
  ): CallResult<BigInt> {
    let result = super.tryCall("lock", [
      EthereumValue.fromUnsignedBigInt(_amount),
      EthereumValue.fromUnsignedBigInt(_period),
      EthereumValue.fromUnsignedBigInt(_batchIndexToLockIn),
      EthereumValue.fromFixedBytes(_agreementHash)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  lockCounter(): BigInt {
    let result = super.call("lockCounter", []);

    return result[0].toBigInt();
  }

  try_lockCounter(): CallResult<BigInt> {
    let result = super.tryCall("lockCounter", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  lockers(param0: Address, param1: BigInt): Contract__lockersResult {
    let result = super.call("lockers", [
      EthereumValue.fromAddress(param0),
      EthereumValue.fromUnsignedBigInt(param1)
    ]);

    return new Contract__lockersResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_lockers(
    param0: Address,
    param1: BigInt
  ): CallResult<Contract__lockersResult> {
    let result = super.tryCall("lockers", [
      EthereumValue.fromAddress(param0),
      EthereumValue.fromUnsignedBigInt(param1)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      new Contract__lockersResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  reputationRewardLeft(): BigInt {
    let result = super.call("reputationRewardLeft", []);

    return result[0].toBigInt();
  }

  try_reputationRewardLeft(): CallResult<BigInt> {
    let result = super.tryCall("reputationRewardLeft", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  batches(param0: BigInt): BigInt {
    let result = super.call("batches", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_batches(param0: BigInt): CallResult<BigInt> {
    let result = super.tryCall("batches", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  totalLockedLeft(): BigInt {
    let result = super.call("totalLockedLeft", []);

    return result[0].toBigInt();
  }

  try_totalLockedLeft(): CallResult<BigInt> {
    let result = super.tryCall("totalLockedLeft", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  getLockingIdScore(_batchIndex: BigInt, _lockingId: BigInt): BigInt {
    let result = super.call("getLockingIdScore", [
      EthereumValue.fromUnsignedBigInt(_batchIndex),
      EthereumValue.fromUnsignedBigInt(_lockingId)
    ]);

    return result[0].toBigInt();
  }

  try_getLockingIdScore(
    _batchIndex: BigInt,
    _lockingId: BigInt
  ): CallResult<BigInt> {
    let result = super.tryCall("getLockingIdScore", [
      EthereumValue.fromUnsignedBigInt(_batchIndex),
      EthereumValue.fromUnsignedBigInt(_lockingId)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  token(): Address {
    let result = super.call("token", []);

    return result[0].toAddress();
  }

  try_token(): CallResult<Address> {
    let result = super.tryCall("token", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }
}

export class ReleaseCall extends EthereumCall {
  get inputs(): ReleaseCall__Inputs {
    return new ReleaseCall__Inputs(this);
  }

  get outputs(): ReleaseCall__Outputs {
    return new ReleaseCall__Outputs(this);
  }
}

export class ReleaseCall__Inputs {
  _call: ReleaseCall;

  constructor(call: ReleaseCall) {
    this._call = call;
  }

  get _beneficiary(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _lockingId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ReleaseCall__Outputs {
  _call: ReleaseCall;

  constructor(call: ReleaseCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RedeemCall extends EthereumCall {
  get inputs(): RedeemCall__Inputs {
    return new RedeemCall__Inputs(this);
  }

  get outputs(): RedeemCall__Outputs {
    return new RedeemCall__Outputs(this);
  }
}

export class RedeemCall__Inputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }

  get _beneficiary(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _lockingId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RedeemCall__Outputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }

  get reputation(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ExtendLockingCall extends EthereumCall {
  get inputs(): ExtendLockingCall__Inputs {
    return new ExtendLockingCall__Inputs(this);
  }

  get outputs(): ExtendLockingCall__Outputs {
    return new ExtendLockingCall__Outputs(this);
  }
}

export class ExtendLockingCall__Inputs {
  _call: ExtendLockingCall;

  constructor(call: ExtendLockingCall) {
    this._call = call;
  }

  get _extendPeriod(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _batchIndexToLockIn(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _lockingId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _agreementHash(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class ExtendLockingCall__Outputs {
  _call: ExtendLockingCall;

  constructor(call: ExtendLockingCall) {
    this._call = call;
  }
}

export class LockCall extends EthereumCall {
  get inputs(): LockCall__Inputs {
    return new LockCall__Inputs(this);
  }

  get outputs(): LockCall__Outputs {
    return new LockCall__Outputs(this);
  }
}

export class LockCall__Inputs {
  _call: LockCall;

  constructor(call: LockCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _period(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _batchIndexToLockIn(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _agreementHash(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class LockCall__Outputs {
  _call: LockCall;

  constructor(call: LockCall) {
    this._call = call;
  }

  get lockingId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class InitializeCall extends EthereumCall {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _avatar(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _reputationReward(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _startTime(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _batchTime(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _redeemEnableTime(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _maxLockingBatches(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get _repRewardConstA(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get _repRewardConstB(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }

  get _batchesIndexCap(): BigInt {
    return this._call.inputValues[8].value.toBigInt();
  }

  get _token(): Address {
    return this._call.inputValues[9].value.toAddress();
  }

  get _agreementHash(): Bytes {
    return this._call.inputValues[10].value.toBytes();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}
